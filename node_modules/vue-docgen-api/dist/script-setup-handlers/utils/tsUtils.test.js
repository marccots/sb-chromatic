"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsUtils_1 = require("./tsUtils");
const babel_parser_1 = __importDefault(require("../../babel-parser"));
describe('getTypeDefinitionFromIdentifier', () => {
    it('resolves an interface in the global scope', () => {
        const parser = (0, babel_parser_1.default)({ plugins: ['typescript'] });
        const src = `
					interface LocalType {
            /**
             * describe the local prop
             */
						prop1: boolean
						prop2: string
					}
					defineProps<LocalType>()
					`;
        const astFile = parser.parse(src);
        //console.log(astFile)
        const nodePath = (0, tsUtils_1.getTypeDefinitionFromIdentifier)(astFile, 'LocalType');
        const props = nodePath === null || nodePath === void 0 ? void 0 : nodePath.map((prop) => prop.node.key.name + ' ' + prop.node.typeAnnotation.typeAnnotation.type);
        expect(props).toStrictEqual(["prop1 TSBooleanKeyword", "prop2 TSStringKeyword"]);
    }),
        it('resolves an Type alias in the global scope', () => {
            const parser = (0, babel_parser_1.default)({ plugins: ['typescript'] });
            const src = `
					type LocalType = {
            /**
             * describe the local prop
             */
						prop1: boolean
						prop2: string
					}
					defineProps<LocalType>()
					`;
            const astFile = parser.parse(src);
            const nodePath = (0, tsUtils_1.getTypeDefinitionFromIdentifier)(astFile, 'LocalType');
            const props = nodePath === null || nodePath === void 0 ? void 0 : nodePath.map((prop) => prop.node.key.name + ' ' + prop.node.typeAnnotation.typeAnnotation.type);
            expect(props).toStrictEqual(["prop1 TSBooleanKeyword", "prop2 TSStringKeyword"]);
        });
});
