import {
  createApp,
  h,
  shallowRef
} from "./chunk-IQMOKLYD.js";
import {
  sanitizeStoryContextUpdate
} from "./chunk-7BXRPSCR.js";
import {
  esm_default
} from "./chunk-DKITWJI6.js";

// node_modules/@storybook/vue3/dist/esm/client/preview/decorateStory.js
function normalizeFunctionalComponent(options) {
  return typeof options === "function" ? {
    render: options,
    name: options.name
  } : options;
}
function prepare(rawStory, innerStory) {
  var story = rawStory;
  if (story == null) {
    return null;
  }
  if (innerStory) {
    return Object.assign({}, normalizeFunctionalComponent(story), {
      components: Object.assign({}, story.components || {}, {
        story: innerStory
      })
    });
  }
  return {
    render: function render3() {
      return h(story);
    }
  };
}
function decorateStory(storyFn, decorators) {
  return decorators.reduce(function(decorated, decorator) {
    return function(context) {
      var story;
      var decoratedStory = decorator(function(update) {
        story = decorated(Object.assign({}, context, sanitizeStoryContextUpdate(update)));
        return story;
      }, context);
      if (!story) {
        story = decorated(context);
      }
      if (decoratedStory === story) {
        return story;
      }
      return prepare(decoratedStory, story);
    };
  }, function(context) {
    return prepare(storyFn(context));
  });
}

// node_modules/@storybook/vue3/dist/esm/client/preview/render.js
var _templateObject;
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var render = function render2(props, context) {
  var id = context.id, Component = context.component;
  if (!Component) {
    throw new Error("Unable to render story ".concat(id, " as the component annotation is missing from the default export"));
  }
  return h(Component, props);
};
var activeStoryComponent = shallowRef(null);
var root = null;
var storybookApp = createApp({
  // If an end-user calls `unmount` on the app, we need to clear our root variable
  unmounted: function unmounted() {
    root = null;
  },
  setup: function setup() {
    return function() {
      if (!activeStoryComponent.value)
        throw new Error("No Vue 3 Story available. Was it set correctly?");
      return h(activeStoryComponent.value);
    };
  }
});
function renderToDOM(_ref, domElement) {
  var title = _ref.title, name = _ref.name, storyFn = _ref.storyFn, showMain = _ref.showMain, showError = _ref.showError, showException = _ref.showException;
  storybookApp.config.errorHandler = showException;
  var element = storyFn();
  if (!element) {
    showError({
      title: 'Expecting a Vue component from the story: "'.concat(name, '" of "').concat(title, '".'),
      description: esm_default(_templateObject || (_templateObject = _taggedTemplateLiteral([`
        Did you forget to return the Vue component from the story?
        Use "() => ({ template: '<my-comp></my-comp>' })" or "() => ({ components: MyComp, template: '<my-comp></my-comp>' })" when defining the story.
      `])))
    });
    return;
  }
  showMain();
  activeStoryComponent.value = element;
  if (!root) {
    root = storybookApp.mount(domElement);
  }
}

export {
  decorateStory,
  render,
  activeStoryComponent,
  storybookApp,
  renderToDOM
};
//# sourceMappingURL=chunk-HHG4J7OM.js.map
